# Памятка работы с базой данных PostgreSQL

Для работы с базой данных PostgreSQL в проекте следует соблюдать несколько основных правил и принципов. Ниже приведены рекомендации по созданию пользователей, настройке прав доступа, структуре базы данных и особенностям работы с БД.

## 1. Правила работы с базой данных PostgreSQL

### 1.1 Создание пользователей

В PostgreSQL важно правильно организовать управление пользователями, чтобы обеспечить безопасность и контроль доступа. Для этого необходимо создавать пользователей с различными правами доступа в зависимости от их роли в проекте.

**Рекомендуемые пользователи:**
- **Администратор базы данных (DB Admin):** Пользователь с полными правами для управления базой данных. Он должен иметь полный доступ к базе данных, включая создание, изменение, удаление схем и таблиц.
- **Пользователь для доступа к данным (Read-Only User):** Пользователь с правами только на чтение данных, который может выполнять только SELECT-запросы.
- **Пользователь для загрузки данных (ETL User):** Пользователь, который выполняет загрузку данных и может изменять таблицы. Он должен иметь права на выполнение INSERT, UPDATE, DELETE и SELECT.
- **Пользователь для администрирования схемы (Schema Admin):** Пользователь, управляющий конкретной схемой базы данных, который может работать с таблицами, представлениями и функциями в своей схеме.

### 1.2 Схема ролей в базе данных

Роли в PostgreSQL позволяют группировать несколько пользователей с одинаковыми правами. Это упрощает управление доступом и снижает количество повторяющихся операций.

- **Создание роли:**  
  Для создания новой роли используется команда `CREATE ROLE role_name;`.
  
- **Назначение роли пользователю:**  
  Чтобы назначить роль пользователю, используется команда `GRANT role_name TO user_name;`.

- Роли могут иметь различные права на выполнение операций, например, на выполнение SELECT, INSERT, DELETE и другие.

### 1.3 Классификация прав доступа (GRANT)

PostgreSQL позволяет настраивать права доступа через команду GRANT. Существует несколько типов прав, которые могут быть назначены пользователям или ролям на различных уровнях (база данных, таблица, схема и т. д.).

- **GRANT для базы данных:**  
  Разрешает подключение к базе данных. Пример: `GRANT CONNECT ON DATABASE db_name TO user_name;`
  
- **GRANT для таблицы:**  
  Разрешает выполнение операций с таблицей, таких как SELECT, INSERT, UPDATE и DELETE. Пример: `GRANT SELECT, INSERT, UPDATE ON TABLE table_name TO user_name;`
  
- **GRANT для схемы:**  
  Разрешает выполнение операций с объектами в схеме. Пример: `GRANT USAGE ON SCHEMA schema_name TO user_name;`
  
- **GRANT для функций:**  
  Разрешает выполнение функций. Пример: `GRANT EXECUTE ON FUNCTION function_name TO user_name;`

Для более широких прав можно использовать команду `GRANT ALL PRIVILEGES`, которая дает полный доступ к объектам базы данных.

---

## 2. Структура базы данных

Структура базы данных PostgreSQL организована с помощью схем, которые являются логическими контейнерами для объектов базы данных (таблиц, индексов, представлений и т. д.). Каждая схема в базе данных может отвечать за конкретную сущность или область, что помогает лучше организовать данные.

**Основные схемы:**
- **public:** Стандартная схема, которая используется по умолчанию для большинства объектов, если не указана другая схема.
- **system:** Схема, содержащая системные объекты, такие как таблицы и индексы для работы PostgreSQL.
- **user_schemas:** Пользовательские схемы, созданные для организации данных по различным направлениям.

Каждая схема может быть ограничена правами доступа для пользователей, что позволяет гибко управлять доступом на уровне объектов базы данных.

Для работы с API или STAGE представлениями под каждую сущность необходимо создавать отдельную схему.

---

## 3. Структура БД STAGE

База данных **STAGE** используется для хранения промежуточных данных, которые обрабатываются на различных этапах ETL-процессов. Каждая схема в **STAGE** отвечает за конкретное направление обработки данных и имеет свою собственную структуру.

**Пример структуры базы данных STAGE:**
- **stage_raw:** Схема для хранения сырых данных, полученных из внешних источников.
- **stage_transformed:** Схема для хранения данных, прошедших первичную трансформацию и подготовленных для дальнейшего анализа.
- **stage_cleaned:** Схема для хранения очищенных данных, готовых к загрузке в основную систему.

Каждая схема выполняет отдельную роль в процессе обработки данных, и доступ к данным может быть ограничен для определенных пользователей.

---

## 4. Советы по работе с базой данных

- Используйте **роли и схемы** для разграничения доступа и упрощения управления правами пользователей.
- Для повышения безопасности ограничьте доступ пользователей только к тем данным, которые им необходимы для работы.
- Регулярно проверяйте права пользователей и ролей с помощью команды `\du` для обеспечения соответствия текущим требованиям безопасности.
- Разделяйте данные по схемам для лучшей организации и оптимизации работы с ними.
- Используйте переменные окружения и конфигурационные файлы (например, `.env`) для централизованного управления параметрами подключения и безопасности.
